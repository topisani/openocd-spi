+ sudo /home/pi/openocd-spi/src/openocd -d4 -s /home/pi/openocd-spi/tcl -f scripts/nrf52-pi/swd-pi.ocd -f scripts/nrf52-pi/flash-unprotect.ocd
Open On-Chip Debugger 0.10.0+dev-01004-g8f19391d (2020-01-14-00:35)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
User : 13 7 options.c:63 configuration_output_handler(): debug_level: 4
User : 14 7 options.c:63 configuration_output_handler(): 
Debug: 15 7 configuration.c:42 add_script_search_dir(): adding /home/pi/openocd-spi/tcl
Debug: 16 7 options.c:187 add_default_dirs(): bindir=/usr/local/bin
Debug: 17 7 options.c:188 add_default_dirs(): pkgdatadir=/usr/local/share/openocd
Debug: 18 7 options.c:189 add_default_dirs(): exepath=/home/pi/openocd-spi/src
Debug: 19 7 options.c:190 add_default_dirs(): bin2data=../share/openocd
Debug: 20 7 configuration.c:42 add_script_search_dir(): adding /root/.openocd
Debug: 21 7 configuration.c:42 add_script_search_dir(): adding /home/pi/openocd-spi/src/../share/openocd/site
Debug: 22 7 configuration.c:42 add_script_search_dir(): adding /home/pi/openocd-spi/src/../share/openocd/scripts
Debug: 23 7 configuration.c:97 find_file(): found scripts/nrf52-pi/swd-pi.ocd
Debug: 24 8 command.c:143 script_debug(): command - interface interface bcm2835gpio
Debug: 26 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_jtag_nums'...
Debug: 27 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_tck_num'...
Debug: 28 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_tms_num'...
Debug: 29 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_tdo_num'...
Debug: 30 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_tdi_num'...
Debug: 31 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_swd_nums'...
Debug: 32 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_swclk_num'...
Debug: 33 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_swdio_num'...
Debug: 34 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_srst_num'...
Debug: 35 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_trst_num'...
Debug: 36 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_speed_coeffs'...
Debug: 37 8 command.c:354 register_command_handler(): registering 'bcm2835gpio_peripheral_base'...
Debug: 38 8 command.c:143 script_debug(): command - bcm2835gpio_peripheral_base bcm2835gpio_peripheral_base 0xFE000000
Debug: 40 8 command.c:143 script_debug(): command - bcm2835gpio_speed_coeffs bcm2835gpio_speed_coeffs 236181 60
Debug: 42 8 command.c:143 script_debug(): command - bcm2835gpio_swd_nums bcm2835gpio_swd_nums 20 21
Debug: 44 8 command.c:143 script_debug(): command - bcm2835gpio_srst_num bcm2835gpio_srst_num 18
Debug: 46 8 command.c:143 script_debug(): command - transport transport select swd
Debug: 47 8 command.c:354 register_command_handler(): registering 'swd'...
Debug: 48 8 bitbang.c:402 bitbang_swd_init(): bitbang_swd_init
Debug: 49 9 configuration.c:97 find_file(): found /home/pi/openocd-spi/tcl/target/nrf52.cfg
Debug: 50 9 configuration.c:97 find_file(): found /home/pi/openocd-spi/tcl/target/swj-dp.tcl
Debug: 51 9 command.c:143 script_debug(): command - transport transport select
Debug: 52 9 command.c:143 script_debug(): command - transport transport select
Debug: 53 9 command.c:143 script_debug(): command - transport transport select
Debug: 54 9 command.c:143 script_debug(): command - transport transport select
Debug: 55 10 command.c:143 script_debug(): command - swd swd newdap nrf52 cpu -expected-id 0x2ba01477
Debug: 56 10 tcl.c:567 jim_newtap_cmd(): Creating New Tap, Chip: nrf52, Tap: cpu, Dotted: nrf52.cpu, 2 params
Debug: 57 10 core.c:1375 jtag_tap_init(): Created Tap: nrf52.cpu @ abs position 0, irlen 0, capture: 0x0 mask: 0x0
Debug: 58 10 command.c:143 script_debug(): command - dap dap create nrf52.dap -chain-position nrf52.cpu
Debug: 59 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 60 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 61 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 62 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 63 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 64 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 65 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 66 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 67 10 command.c:354 register_command_handler(): registering 'nrf52.dap'...
Debug: 68 10 command.c:143 script_debug(): command - target target create nrf52.cpu cortex_m -dap nrf52.dap
Debug: 69 10 command.c:354 register_command_handler(): registering 'arm'...
Debug: 70 10 command.c:354 register_command_handler(): registering 'arm'...
Debug: 71 10 command.c:354 register_command_handler(): registering 'arm'...
Debug: 72 11 command.c:354 register_command_handler(): registering 'arm'...
Debug: 73 11 command.c:354 register_command_handler(): registering 'arm'...
Debug: 74 11 command.c:354 register_command_handler(): registering 'arm'...
Debug: 75 11 command.c:354 register_command_handler(): registering 'arm'...
Debug: 76 11 command.c:354 register_command_handler(): registering 'arm'...
Debug: 77 11 command.c:354 register_command_handler(): registering 'arm'...
Debug: 78 11 command.c:354 register_command_handler(): registering 'tpiu'...
Debug: 79 11 command.c:354 register_command_handler(): registering 'itm'...
Debug: 80 11 command.c:354 register_command_handler(): registering 'itm'...
Debug: 81 11 command.c:354 register_command_handler(): registering 'cortex_m'...
Debug: 82 11 command.c:354 register_command_handler(): registering 'cortex_m'...
Debug: 83 11 command.c:354 register_command_handler(): registering 'cortex_m'...
Debug: 84 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 85 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 86 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 87 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 88 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 89 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 90 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 91 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 92 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 93 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 94 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 95 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 96 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 97 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 98 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 99 11 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 100 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 101 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 102 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 103 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 104 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 105 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 106 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 107 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 108 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 109 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 110 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 111 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 112 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 113 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 114 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 115 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 116 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 117 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 118 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 119 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 120 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 121 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 122 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 123 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 124 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 125 12 command.c:354 register_command_handler(): registering 'nrf52.cpu'...
Debug: 126 12 command.c:143 script_debug(): command - adapter_khz adapter_khz 1000
Debug: 128 12 core.c:1707 jtag_config_khz(): handle jtag khz
Debug: 129 12 core.c:1670 adapter_khz_to_speed(): convert khz to interface specific speed value
Debug: 130 13 core.c:1670 adapter_khz_to_speed(): convert khz to interface specific speed value
Debug: 131 13 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu configure -work-area-phys 0x20000000 -work-area-size 0x4000 -work-area-backup 0
Debug: 132 13 target.c:1961 target_free_all_working_areas_restore(): freeing all working areas
Debug: 133 13 target.c:1961 target_free_all_working_areas_restore(): freeing all working areas
Debug: 134 13 target.c:1961 target_free_all_working_areas_restore(): freeing all working areas
Debug: 135 13 command.c:143 script_debug(): command - transport transport select
Debug: 136 13 command.c:143 script_debug(): command - cortex_m cortex_m reset_config sysresetreq
Debug: 138 13 command.c:143 script_debug(): command - flash flash bank nrf52.flash nrf5 0x00000000 0 1 1 nrf52.cpu
Debug: 140 13 command.c:354 register_command_handler(): registering 'nrf5'...
Debug: 141 13 command.c:354 register_command_handler(): registering 'nrf5'...
Debug: 142 13 command.c:354 register_command_handler(): registering 'nrf51'...
Debug: 143 13 command.c:354 register_command_handler(): registering 'nrf51'...
Debug: 144 13 tcl.c:1156 handle_flash_bank_command(): 'nrf5' driver usage field missing
Debug: 145 13 command.c:143 script_debug(): command - flash flash bank nrf52.uicr nrf5 0x10001000 0 1 1 nrf52.cpu
Debug: 147 13 command.c:376 register_command(): command 'nrf5' is already registered in '<global>' context
Debug: 148 13 command.c:376 register_command(): command 'mass_erase' is already registered in 'nrf5' context
Debug: 149 13 command.c:376 register_command(): command 'info' is already registered in 'nrf5' context
Debug: 150 13 command.c:376 register_command(): command 'nrf51' is already registered in '<global>' context
Debug: 151 13 command.c:376 register_command(): command 'mass_erase' is already registered in 'nrf51' context
Debug: 152 13 command.c:376 register_command(): command 'info' is already registered in 'nrf51' context
Debug: 153 13 tcl.c:1156 handle_flash_bank_command(): 'nrf5' driver usage field missing
Debug: 154 14 configuration.c:97 find_file(): found scripts/nrf52-pi/flash-unprotect.ocd
Debug: 155 14 command.c:143 script_debug(): command - gdb_flash_program gdb_flash_program enable
Debug: 157 14 command.c:143 script_debug(): command - gdb_breakpoint_override gdb_breakpoint_override hard
User : 159 14 gdb_server.c:3669 handle_gdb_breakpoint_override_command(): force hard breakpoints
Debug: 160 14 command.c:143 script_debug(): command - init init
Debug: 162 14 command.c:143 script_debug(): command - target target init
Debug: 164 14 command.c:143 script_debug(): command - target target names
Debug: 165 14 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu cget -event gdb-flash-erase-start
Debug: 166 14 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu configure -event gdb-flash-erase-start reset init
Debug: 167 14 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu cget -event gdb-flash-write-end
Debug: 168 14 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu configure -event gdb-flash-write-end reset halt
Debug: 169 15 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu cget -event gdb-attach
Debug: 170 15 command.c:143 script_debug(): command - nrf52.cpu nrf52.cpu configure -event gdb-attach halt
Debug: 171 15 target.c:1423 handle_target_init_command(): Initializing targets...
Debug: 172 15 semihosting_common.c:97 semihosting_common_init():  
Debug: 173 15 command.c:354 register_command_handler(): registering 'target_request'...
Debug: 174 15 command.c:354 register_command_handler(): registering 'trace'...
Debug: 175 15 command.c:354 register_command_handler(): registering 'trace'...
Debug: 176 15 command.c:354 register_command_handler(): registering 'fast_load_image'...
Debug: 177 15 command.c:354 register_command_handler(): registering 'fast_load'...
Debug: 178 15 command.c:354 register_command_handler(): registering 'profile'...
Debug: 179 15 command.c:354 register_command_handler(): registering 'virt2phys'...
Debug: 180 15 command.c:354 register_command_handler(): registering 'reg'...
Debug: 181 15 command.c:354 register_command_handler(): registering 'poll'...
Debug: 182 15 command.c:354 register_command_handler(): registering 'wait_halt'...
Debug: 183 15 command.c:354 register_command_handler(): registering 'halt'...
Debug: 184 15 command.c:354 register_command_handler(): registering 'resume'...
Debug: 185 15 command.c:354 register_command_handler(): registering 'reset'...
Debug: 186 15 command.c:354 register_command_handler(): registering 'soft_reset_halt'...
Debug: 187 15 command.c:354 register_command_handler(): registering 'step'...
Debug: 188 15 command.c:354 register_command_handler(): registering 'mdd'...
Debug: 189 15 command.c:354 register_command_handler(): registering 'mdw'...
Debug: 190 15 command.c:354 register_command_handler(): registering 'mdh'...
Debug: 191 15 command.c:354 register_command_handler(): registering 'mdb'...
Debug: 192 15 command.c:354 register_command_handler(): registering 'mwd'...
Debug: 193 15 command.c:354 register_command_handler(): registering 'mww'...
Debug: 194 16 command.c:354 register_command_handler(): registering 'mwh'...
Debug: 195 16 command.c:354 register_command_handler(): registering 'mwb'...
Debug: 196 16 command.c:354 register_command_handler(): registering 'bp'...
Debug: 197 16 command.c:354 register_command_handler(): registering 'rbp'...
Debug: 198 16 command.c:354 register_command_handler(): registering 'wp'...
Debug: 199 16 command.c:354 register_command_handler(): registering 'rwp'...
Debug: 200 16 command.c:354 register_command_handler(): registering 'load_image'...
Debug: 201 16 command.c:354 register_command_handler(): registering 'dump_image'...
Debug: 202 16 command.c:354 register_command_handler(): registering 'verify_image_checksum'...
Debug: 203 16 command.c:354 register_command_handler(): registering 'verify_image'...
Debug: 204 16 command.c:354 register_command_handler(): registering 'test_image'...
Debug: 205 16 command.c:354 register_command_handler(): registering 'reset_nag'...
Debug: 206 16 command.c:354 register_command_handler(): registering 'ps'...
Debug: 207 16 command.c:354 register_command_handler(): registering 'test_mem_access'...
Info : 208 16 bcm2835gpio.c:450 bcm2835gpio_init(): BCM2835 GPIO JTAG/SWD bitbang driver
Info : 209 16 bcm2835gpio.c:458 bcm2835gpio_init(): SWD only mode enabled (specify tck, tms, tdi and tdo gpios to add JTAG mode)
Debug: 210 16 bcm2835gpio.c:525 bcm2835gpio_init(): saved pinmux settings: tck 0 tms 0 tdi 0 tdo 0 trst 0 srst 1
Debug: 211 16 bitbang.c:484 bitbang_switch_to_swd(): bitbang_switch_to_swd
** host -> trgt offset 0 bits 136: ff ff ff ff ff ff ff 9e e7 ff ff ff ff ff ff ff 00
spi_init spi mode: 80
bits per word: 8
max speed: 122000 Hz (122 KHz)
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
Debug: 212 21 core.c:1670 adapter_khz_to_speed(): convert khz to interface specific speed value
Debug: 213 21 core.c:1674 adapter_khz_to_speed(): have interface set up
Debug: 214 21 core.c:1670 adapter_khz_to_speed(): convert khz to interface specific speed value
Debug: 215 21 core.c:1674 adapter_khz_to_speed(): have interface set up
Info : 216 21 core.c:1452 adapter_init(): clock speed 1000 kHz
Debug: 217 21 openocd.c:141 handle_init_command(): Debug Adapter init complete
Debug: 218 21 command.c:143 script_debug(): command - transport transport init
Debug: 220 21 transport.c:239 handle_transport_init(): handle_transport_init
Debug: 221 21 command.c:143 script_debug(): command - dap dap init
Debug: 223 21 arm_dap.c:106 dap_init_all(): Initializing all DAPs ...
Debug: 224 21 bitbang.c:459 bitbang_swd_switch_seq(): bitbang_swd_switch_seq
Debug: 225 21 bitbang.c:467 bitbang_swd_switch_seq(): JTAG-to-SWD
** host -> trgt offset 0 bits 136: ff ff ff ff ff ff ff 9e e7 ff ff ff ff ff ff ff 00
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
Debug: 226 25 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: a5
spi_transmit: len=1
  A5 
**** Add 8 clock cycles after read
spi_receive: len=6
  73 47 01 BA E2 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 73 47 01 ba 62
Debug: 227 34 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 0 = 2ba01477
Debug: 228 34 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 81
spi_transmit: len=1
  81 
write ack force OK
** trgt -> host offset 0 bits  5: d3
** host -> trgt offset 5 bits 33: d3 03 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  CB C0 00 00 00 00 
Debug: 229 36 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 0 = 0000001e
Debug: 230 36 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 231 36 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Info : 232 36 adi_v5_swd.c:136 swd_connect(): SWD DPIDR 0x2ba01477
Debug: 233 36 arm_adi_v5.c:653 dap_dp_init(): nrf52.dap
Debug: 234 36 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 235 38 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 00000000
Debug: 236 38 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 8d
spi_transmit: len=1
  B1 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 04 00 00 EF FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 04 00 00 2f
Debug: 237 48 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 4 = f0000041
Debug: 238 48 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 239 48 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 240 48 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: a9
spi_transmit: len=1
  95 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 04 00 00 aa
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 20 00 00 54 00 
Debug: 241 50 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 4 = 50000020
Debug: 242 50 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 8d
spi_transmit: len=1
  B1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 04 00 00 FF FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 04 00 00 bf
Debug: 243 59 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 4 = f0000040
Debug: 244 59 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: a9
spi_transmit: len=1
  95 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 8a
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 50 00 
Debug: 245 61 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 4 = 50000000
Debug: 246 61 arm_adi_v5.c:698 dap_dp_init(): DAP: wait CDBGPWRUPACK
Debug: 247 61 arm_adi_v5.h:501 dap_dp_poll_register(): DAP: poll 4, mask 0x20000000, value 0x20000000
Debug: 248 61 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 8d
spi_transmit: len=1
  B1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 04 00 00 FF FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 04 00 00 3f
Debug: 249 70 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 4 = f0000040
Debug: 250 70 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 251 70 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 252 70 arm_adi_v5.c:706 dap_dp_init(): DAP: wait CSYSPWRUPACK
Debug: 253 70 arm_adi_v5.h:501 dap_dp_poll_register(): DAP: poll 4, mask 0x80000000, value 0x80000000
Debug: 254 70 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 8d
spi_transmit: len=1
  B1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 04 00 00 FF FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 04 00 00 3f
Debug: 255 79 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 4 = f0000040
Debug: 256 79 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 257 80 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 258 80 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 8d
spi_transmit: len=1
  B1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 04 00 00 FF FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 04 00 00 bf
Debug: 259 89 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 4 = f0000040
Debug: 260 89 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: a9
spi_transmit: len=1
  95 
write ack force OK
** trgt -> host offset 0 bits  5: 33
** host -> trgt offset 5 bits 33: 33 00 00 00 aa
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  CC 00 00 00 54 00 
Debug: 261 91 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 4 = 50000001
Debug: 262 91 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 8d
spi_transmit: len=1
  B1 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 04 00 00 EF FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 04 00 00 af
Debug: 263 100 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg 4 = f0000041
Debug: 264 100 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 265 100 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 266 100 openocd.c:158 handle_init_command(): Examining targets...
Debug: 267 100 target.c:1611 target_call_event_callbacks(): target event 17 (examine-start) for core nrf52.cpu
Debug: 268 100 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 1e 00 00 c0
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 78 00 00 00 00 
Debug: 269 102 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 000000f0
Debug: 270 102 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 271 111 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 01050000
**** delay 255
spi_transmit: len=32
  00 00 00 00 00 00 00 00 
  00 00 00 00 00 00 00 00 
  00 00 00 00 00 00 00 00 
  00 00 00 00 00 00 00 00 
Debug: 272 118 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 01 70 47 E2 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 01 70 47 22
Debug: 273 127 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 24770011
Debug: 274 127 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 275 127 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 276 127 arm_adi_v5.c:888 dap_find_ap(): Found AHB3-AP at AP index: 0 (IDR=0x24770011)
Debug: 277 127 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 278 129 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 00000000
Debug: 279 129 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: a3
spi_transmit: len=1
  C5 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 04 00 40 14
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 20 00 02 28 00 
Debug: 280 131 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 0 = a2000020
**** delay 8
spi_transmit: len=1
  00 
Debug: 281 131 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 282 133 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 283 134 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 01 70 47 E2 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 01 70 47 22
Debug: 284 143 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 24770011
**** delay 8
spi_transmit: len=1
  00 
Debug: 285 143 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 06 00 30 F2 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 06 00 30 b2
Debug: 286 152 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 23000060
Debug: 287 152 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 1e 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 78 00 00 00 00 
Debug: 288 154 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 000000f0
Debug: 289 154 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: af
spi_transmit: len=1
  F5 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 06 00 30 F2 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 06 00 30 32
Debug: 290 163 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 4 = 23000060
**** delay 8
spi_transmit: len=1
  00 
Debug: 291 163 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 00 00 E0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 00 00 20
Debug: 292 172 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 00000000
Debug: 293 172 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 294 172 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 295 173 arm_adi_v5.c:777 mem_ap_init(): MEM_AP Packed Transfers: enabled
Debug: 296 173 arm_adi_v5.c:788 mem_ap_init(): MEM_AP CFG: large data 0, long address 0, big-endian 0
Debug: 297 173 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 298 175 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 00000000
Debug: 299 175 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: a3
spi_transmit: len=1
  C5 
write ack force OK
** trgt -> host offset 0 bits  5: 53
** host -> trgt offset 5 bits 33: 53 04 00 40 34
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  CA 20 00 02 2C 00 
Debug: 300 176 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 0 = a2000022
**** delay 8
spi_transmit: len=1
  00 
Debug: 301 177 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 a0 1d 00 3c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 05 B8 00 3C 00 
Debug: 302 179 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e000ed00
**** delay 8
spi_transmit: len=1
  00 
Debug: 303 179 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 00 00 E0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 00 00 20
Debug: 304 188 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 305 189 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 24 FC 10 F4 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 24 fc 10 34
Debug: 306 198 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 410fc241
Debug: 307 198 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 308 198 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 309 198 target.c:2377 target_read_u32(): address: 0xe000ed00, value: 0x410fc241
Debug: 310 198 cortex_m.c:2167 cortex_m_examine(): Cortex-M4 r0p1 processor detected
Debug: 311 198 cortex_m.c:2178 cortex_m_examine(): cpuid: 0x410fc241
Debug: 312 198 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 e8 1d 00 3c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 17 B8 00 3C 00 
Debug: 313 200 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e000ef40
**** delay 8
spi_transmit: len=1
  00 
Debug: 314 200 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 24 FC 10 F4 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 24 fc 10 34
Debug: 315 209 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 410fc241
**** delay 8
spi_transmit: len=1
  00 
Debug: 316 210 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 02 10 01 F1 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 02 10 01 31
Debug: 317 219 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 10110021
Debug: 318 219 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 319 219 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 320 219 target.c:2377 target_read_u32(): address: 0xe000ef40, value: 0x10110021
Debug: 321 219 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 02 10 01 F1 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 02 10 01 b1
Debug: 322 228 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 10110021
**** delay 8
spi_transmit: len=1
  00 
Debug: 323 229 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 01 00 10 E1 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 01 00 10 21
Debug: 324 237 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 11000011
Debug: 325 238 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 326 238 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 327 238 target.c:2377 target_read_u32(): address: 0xe000ef44, value: 0x11000011
Debug: 328 238 cortex_m.c:2189 cortex_m_examine(): Cortex-M4 floating point feature FPv4_SP found
Debug: 329 238 target.c:2465 target_write_u32(): address: 0xe000edfc, value: 0x01000000
Debug: 330 238 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 93
** host -> trgt offset 5 bits 33: 93 bf 1d 00 7c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C9 FD B8 00 3C 00 
Debug: 331 240 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e000edfc
**** delay 8
spi_transmit: len=1
  00 
Debug: 332 240 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 20 20
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 04 04 00 
Debug: 333 242 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 01000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 334 243 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 335 243 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 336 243 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 04 00 1c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 20 00 38 00 
Debug: 337 245 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0002000
**** delay 8
spi_transmit: len=1
  00 
Debug: 338 245 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 01 00 10 E1 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 01 00 10 21
Debug: 339 254 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 11000011
**** delay 8
spi_transmit: len=1
  00 
Debug: 340 255 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 26 00 00 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 26 00 00 30
Debug: 341 263 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 00000260
Debug: 342 264 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 343 264 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 344 264 target.c:2377 target_read_u32(): address: 0xe0002000, value: 0x00000260
Debug: 345 264 target.c:2465 target_write_u32(): address: 0xe0002008, value: 0x00000000
Debug: 346 264 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 01 04 00 7c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 80 20 00 3C 00 
Debug: 347 266 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0002008
**** delay 8
spi_transmit: len=1
  00 
Debug: 348 266 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 349 268 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 350 269 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 351 269 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 352 269 target.c:2465 target_write_u32(): address: 0xe000200c, value: 0x00000000
Debug: 353 269 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 354 271 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 355 271 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 356 272 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 357 272 target.c:2465 target_write_u32(): address: 0xe0002010, value: 0x00000000
Debug: 358 272 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 359 274 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 360 274 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 361 275 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 362 275 target.c:2465 target_write_u32(): address: 0xe0002014, value: 0x00000000
Debug: 363 275 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 364 277 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 365 277 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 366 277 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 367 277 target.c:2465 target_write_u32(): address: 0xe0002018, value: 0x00000000
Debug: 368 277 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 369 279 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 370 280 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 371 280 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 372 280 target.c:2465 target_write_u32(): address: 0xe000201c, value: 0x00000000
Debug: 373 280 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 374 282 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 375 282 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 376 283 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 377 283 target.c:2465 target_write_u32(): address: 0xe0002020, value: 0x00000000
Debug: 378 283 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 379 285 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 380 285 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 381 285 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 382 285 target.c:2465 target_write_u32(): address: 0xe0002024, value: 0x00000000
Debug: 383 285 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 80
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 384 287 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 385 288 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 386 288 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 387 288 cortex_m.c:2270 cortex_m_examine(): FPB fpcr 0x260, numcode 6, numlit 2
Debug: 388 288 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 02 00 1c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 40 00 38 00 
Debug: 389 290 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0001000
**** delay 8
spi_transmit: len=1
  00 
Debug: 390 290 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 26 00 00 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 26 00 00 30
Debug: 391 299 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 00000260
**** delay 8
spi_transmit: len=1
  00 
Debug: 392 300 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 00 00 F4 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 00 00 34
Debug: 393 309 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 40000000
Debug: 394 309 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 395 309 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 396 309 target.c:2377 target_read_u32(): address: 0xe0001000, value: 0x40000000
Debug: 397 309 cortex_m.c:2004 cortex_m_dwt_setup(): DWT_CTRL: 0x40000000
Debug: 398 309 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 93
** host -> trgt offset 5 bits 33: 93 f7 03 00 3c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C9 EF C0 00 3C 00 
Debug: 399 311 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0001fbc
**** delay 8
spi_transmit: len=1
  00 
Debug: 400 311 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 00 00 F4 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 00 00 34
Debug: 401 320 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 40000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 402 321 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 00 00 E0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 00 00 20
Debug: 403 330 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 00000000
Debug: 404 330 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 405 330 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 406 330 target.c:2377 target_read_u32(): address: 0xe0001fbc, value: 0x00000000
Debug: 407 330 cortex_m.c:2011 cortex_m_dwt_setup(): DWT_DEVARCH: 0x0
Debug: 408 330 target.c:2465 target_write_u32(): address: 0xe0001028, value: 0x00000000
Debug: 409 330 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 05 02 00 5c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 A0 40 00 38 00 
Debug: 410 332 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0001028
**** delay 8
spi_transmit: len=1
  00 
Debug: 411 332 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 412 334 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 413 335 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 414 335 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 415 335 target.c:2465 target_write_u32(): address: 0xe0001038, value: 0x00000000
Debug: 416 335 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 07 02 00 7c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 E0 40 00 3C 00 
Debug: 417 337 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0001038
**** delay 8
spi_transmit: len=1
  00 
Debug: 418 337 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 419 339 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 420 340 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 421 340 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 422 340 target.c:2465 target_write_u32(): address: 0xe0001048, value: 0x00000000
Debug: 423 340 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 09 02 00 5c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 90 40 00 38 00 
Debug: 424 342 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0001048
**** delay 8
spi_transmit: len=1
  00 
Debug: 425 343 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 426 344 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 427 345 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 428 345 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 429 345 target.c:2465 target_write_u32(): address: 0xe0001058, value: 0x00000000
Debug: 430 345 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 0b 02 00 7c
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 D0 40 00 3C 00 
Debug: 431 347 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e0001058
**** delay 8
spi_transmit: len=1
  00 
Debug: 432 348 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: bb
spi_transmit: len=1
  DD 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 00 00
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 00 00 00 
Debug: 433 349 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg C = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 434 350 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 435 350 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 436 350 cortex_m.c:2060 cortex_m_dwt_setup(): DWT dwtcr 0x40000000, comp 4, watch/trigger
Info : 437 350 cortex_m.c:2280 cortex_m_examine(): nrf52.cpu: hardware has 6 breakpoints, 4 watchpoints
Debug: 438 350 target.c:1611 target_call_event_callbacks(): target event 18 (examine-end) for core nrf52.cpu
Debug: 439 350 command.c:143 script_debug(): command - flash flash init
Debug: 440 350 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: 8b
spi_transmit: len=1
  D1 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 be 1d 00 fc
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 7D B8 00 3C 00 
Debug: 441 352 bitbang.c:582 bitbang_swd_write_reg(): OK AP write reg 4 = e000edf0
**** delay 8
spi_transmit: len=1
  00 
Debug: 442 353 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 02 00 00 e0
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 40 00 00 04 00 
Debug: 443 355 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 00000010
Debug: 444 355 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 00 00 E0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 00 00 e0
Debug: 445 364 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 00000000
**** delay 8
spi_transmit: len=1
  00 
Debug: 446 364 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 447 373 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 448 373 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 449 373 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 451 373 tcl.c:1222 handle_flash_init_command(): Initializing flash devices...
Debug: 452 373 command.c:354 register_command_handler(): registering 'flash'...
Debug: 453 373 command.c:354 register_command_handler(): registering 'flash'...
Debug: 454 373 command.c:354 register_command_handler(): registering 'flash'...
Debug: 455 373 command.c:354 register_command_handler(): registering 'flash'...
Debug: 456 373 command.c:354 register_command_handler(): registering 'flash'...
Debug: 457 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 458 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 459 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 460 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 461 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 462 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 463 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 464 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 465 374 command.c:354 register_command_handler(): registering 'flash'...
Debug: 466 374 command.c:143 script_debug(): command - nand nand init
Debug: 467 374 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 468 383 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 01050000
**** delay 8
spi_transmit: len=1
  00 
Debug: 469 383 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 470 392 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 471 392 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 472 393 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 474 393 tcl.c:498 handle_nand_init_command(): Initializing NAND devices...
Debug: 475 393 command.c:143 script_debug(): command - pld pld init
Debug: 476 393 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 477 402 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 01050000
**** delay 8
spi_transmit: len=1
  00 
Debug: 478 402 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 00 E0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 00 e0
Debug: 479 411 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 00050000
Debug: 480 411 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 481 411 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 483 411 pld.c:206 handle_pld_init_command(): Initializing PLDs...
Debug: 484 411 gdb_server.c:3492 gdb_target_start(): starting gdb server for nrf52.cpu on 3333
Info : 485 412 server.c:311 add_service(): Listening on port 3333 for gdb connections
Debug: 486 412 command.c:143 script_debug(): command - echo echo Checking flash protection...
Debug: 487 412 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 00 E0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 00 20
Debug: 488 421 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 00050000
**** delay 8
spi_transmit: len=1
  00 
Debug: 489 421 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 490 430 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 491 430 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 492 430 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
User : 494 430 command.c:769 jim_echo(): Checking flash protection...
Debug: 495 430 command.c:143 script_debug(): command - nrf52.dap nrf52.dap apreg 1 0x0c
Debug: 496 430 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 497 439 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 01050000
**** delay 8
spi_transmit: len=1
  00 
Debug: 498 440 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 499 449 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 500 449 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 501 449 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 503 449 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 00 00 20 20
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 00 00 04 04 00 
Debug: 504 451 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 01000000
Debug: 505 451 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 9f
spi_transmit: len=1
  F9 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 506 460 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg C = 01050000
**** delay 255
spi_transmit: len=32
  00 00 00 00 00 00 00 00 
  00 00 00 00 00 00 00 00 
  00 00 00 00 00 00 00 00 
  00 00 00 00 00 00 00 00 
Debug: 507 467 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 00 00 00 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 00 00 00 30
Debug: 508 476 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 00000001
Debug: 509 476 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 510 476 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 511 476 command.c:143 script_debug(): command - echo echo Flash protection is 0x00000001

Debug: 512 476 bitbang.c:555 bitbang_swd_write_reg(): bitbang_swd_write_reg
** host -> trgt offset 0 bits  8: b1
spi_transmit: len=1
  8D 
write ack force OK
** trgt -> host offset 0 bits  5: 13
** host -> trgt offset 5 bits 33: 13 02 00 00 20
  pad 2
**** Add 8 cycles after write
spi_transmit: len=6
  C8 40 00 00 04 00 
Debug: 513 478 bitbang.c:582 bitbang_swd_write_reg(): OK DP write reg 8 = 00000010
Debug: 514 478 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  13 00 00 00 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 13 00 00 00 f0
Debug: 515 487 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 00000001
**** delay 8
spi_transmit: len=1
  00 
Debug: 516 487 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 517 496 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 518 496 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 519 497 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
User : 521 497 command.c:769 jim_echo(): Flash protection is 0x00000001

Debug: 522 497 command.c:143 script_debug(): command - echo echo Flash is already unprotected
Debug: 523 497 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 524 506 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 01050000
**** delay 8
spi_transmit: len=1
  00 
Debug: 525 506 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 526 515 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 527 515 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 528 515 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
User : 530 515 command.c:769 jim_echo(): Flash is already unprotected
Debug: 531 515 command.c:143 script_debug(): command - exit exit 1
Debug: 533 515 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: 87
spi_transmit: len=1
  E1 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 30
Debug: 534 524 bitbang.c:523 bitbang_swd_read_reg(): OK AP read reg 0 = 01050000
**** delay 8
spi_transmit: len=1
  00 
Debug: 535 525 bitbang.c:496 bitbang_swd_read_reg(): bitbang_swd_read_reg
** host -> trgt offset 0 bits  8: bd
spi_transmit: len=1
  BD 
**** Add 8 clock cycles after read
spi_receive: len=6
  03 00 50 10 F0 FF 
**** Resync after read
**** spi_transmit_resync
spi_transmit: len=17
  FF FF FF FF FF FF FF 79 
  E7 FF FF FF FF FF FF FF 
  00 
spi_transmit: len=8
  00 29 40 00 00 00 00 00 
spi_transmit: len=8
  00 81 CB C0 00 00 00 00 
** trgt -> host offset 0 bits 38: 03 00 50 10 f0
Debug: 536 534 bitbang.c:523 bitbang_swd_read_reg(): OK DP read reg C = 01050000
Debug: 537 534 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 538 534 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
Debug: 540 534 target.c:1961 target_free_all_working_areas_restore(): freeing all working areas
Debug: 541 534 bitbang.c:459 bitbang_swd_switch_seq(): bitbang_swd_switch_seq
Debug: 542 534 bitbang.c:471 bitbang_swd_switch_seq(): SWD-to-JTAG
** host -> trgt offset 0 bits 80: ff ff ff ff ff ff ff 3c e7 ff
spi_transmit: len=10
  FF FF FF FF FF FF FF 3C 
  E7 FF 
Debug: 543 537 bitbang.c:607 bitbang_swd_run_queue(): bitbang_swd_run_queue
**** delay 8
spi_transmit: len=1
  00 
Debug: 544 537 bitbang.c:614 bitbang_swd_run_queue(): SWD queue return value: 00
